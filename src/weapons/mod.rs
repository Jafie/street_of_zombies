pub mod pistol;

use crate::game_entity::projectiles::Projectile;

use bevy::prelude::*;

/// A Pistol is a "Weapon", single fire
pub struct Pistol {
    /// Speed of the projectile
    speed: f32,
    /// Maximum number of amo in the weapon
    max_amo: u32,
    /// Current amo  in the weapon
    current_amo: u32,
    /// Distance of fire of the projectiles generated by the weapon
    limit_of_fire: u32,
    /// The fire rate
    initial_fire_rate: f32,
    /// The fire rate
    current_fire_rate_timer: f32,
}

/// Define a Weapon which is able to fire projectiles
pub trait Weapon {
    /// Create a new Weapon
    fn new(projectile_speed: f32, fire_rate: f32, max_amo: u32, fire_distance: u32) -> Self
    where
        Self: Sized;

    /// The generic fire command. Will generate a projectile following the weapon type defined
    /// 
    /// # Arguments
    ///
    /// * `command` - The bevy command interface.
    /// * `time` - The bevy time interface.
    /// * `direction` - The direction to fire the projectile.
    /// * `initial_pos` - The initial position of the projectile.
    /// * `is_ennemy` - True if the projectile is from an ennemy.
    ///
    fn fire_global(
        &mut self,
        commands: &mut Commands,
        time: &Res<Time>,
        direction: (f32, f32),
        initial_pos: (f32, f32),
        is_ennemy: bool,
    ) {
        if self.get_amo() > 0 && self.is_ready_to_fire(time.delta_seconds()) {
            self.fire_with_weapon(commands, direction, initial_pos, is_ennemy);
            self.reduce_amo();
        }
    }

    fn fire_with_weapon(
        &mut self,
        commands: &mut Commands,
        direction: (f32, f32),
        initial_pos: (f32, f32),
        is_ennemy: bool,
    ) {
        let (pos_x, pox_y) = initial_pos;
        let asset_color = if is_ennemy {
            Color::hex("FF0000").unwrap()
        } else {
            Color::hex("FFFFFF").unwrap()
        };

        commands
            .spawn(SpriteBundle {
                sprite: Sprite {
                    color: asset_color,
                    custom_size: Some(Vec2::new(5.0, 5.0)),
                    ..Default::default()
                },
                transform: Transform::from_xyz(pos_x, pox_y, 0.0),
                ..Default::default()
            })
            .insert(self.create_projectile(direction, initial_pos, is_ennemy));
    }

    /// Method to reload the weapon amo.
    fn reload(&mut self);

    /// Get the number of amo available in the weapon
    fn get_amo(&self) -> u32;

    /// Reduce the number of amo in the weapon by 1
    fn reduce_amo(&mut self);

    /// Get the fire rate of the weapon
    fn is_ready_to_fire(&mut self, time_elapsed_since_last_update: f32) -> bool;

    /// Create a new projectile
    /// 
    /// # Arguments
    ///
    /// * `direction_to_set` - The direction of the projectile
    /// * `initial_position_to_set` - The initial position of the projectile
    /// * `is_ennemy` - True if the projectile is from an ennemy.
    ///
    fn create_projectile(
        &self,
        direction_to_set: (f32, f32),
        initial_position_to_set: (f32, f32),
        is_ennemy: bool,
    ) -> Projectile;
}
